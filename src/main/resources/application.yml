spring:
  application:
    name: aurora-failover
  main:
    banner-mode: "off"
  profiles:
    active: localhost
  jackson:
    default-property-inclusion: non_empty
  datasource:
    username: dinnertime
    password: password
    hikari:
      schema: dinnertime
  flyway:
    schemas:
      - ${spring.datasource.hikari.schema}
  jpa:
    open-in-view: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        jdbc:
          batch_size: 50
        temp:
          use_jdbc_metadata_defaults: false
    show-sql: false

logging:
  level:
    io.micrometer.newrelic: WARN

resource:
  path: /v1/dinner

# Actuator Settings
management:
  endpoints:
    web:
      exposure:
        include: '*'
  endpoint:
    health:
      show-details: ALWAYS
  metrics:
    export:
      newrelic:
        enabled: false
        connect-timeout: 10s
    tags:
      application: ${spring.application.name}
      container: ${HOSTNAME:}${COMPUTERNAME:}

---
spring:
  config:
    activate:
      on-profile: localhost
  datasource-reader:
    driver-class-name: org.postgresql.Driver
    jdbc-url: jdbc:postgresql://localhost:5433/postgres
    platform: postgresql
    username: postgres
    password: password
    hikari:
      schema: postgres
      maximum-pool-size: 10
      minimum-idle: 1
      idle-timeout: 10000
      pool-name: ReadHikariPool
  datasource-writer:
    driver-class-name: org.postgresql.Driver
    jdbc-url: jdbc:postgresql://localhost:5432/postgres
    platform: postgresql
    username: postgres
    password: password
    hikari:
      schema: postgres
      maximum-pool-size: 10
      minimum-idle: 1
      idle-timeout: 10000
      pool-name: WriteHikariPool

  flyway:
    placeholders:
      username: ${spring.datasource.username}
      password: ${spring.datasource.password}
    user: postgres
    password: password
  jpa:
    show-sql: true

logging:
  level:
    example: DEBUG
    com.zaxxer.hikari: DEBUG
    org.hibernate.SQL: DEBUG
    org.hibernate.type: TRACE

---
spring:
  config:
    activate:
      on-profile: development
  datasource:
    username: dinnertime
    password: password
# Reader and writer datasource configuration from https://dzone.com/articles/spring-boot-2-with-multiple-datasources
  datasource-reader:
    driver-class-name: software.aws.rds.jdbc.postgresql.Driver
#    jdbc:postgresql://myauroracluster.cluster-c9bfei4hjlrd.us-east-1-beta.rds.amazonaws.com:5432,
#    myauroracluster.cluster-ro-c9bfei4hjlrd.us-east-1-beta.rds.amazonaws.com:5432
#    /postgres?user=<primaryuser>&password=<primarypw>&loginTimeout=2
#    &connectTimeout=2&cancelSignalTimeout=2&socketTimeout=60
#    &tcpKeepAlive=true&targetServerType=primary&loadBalanceHosts=true
    jdbc-url: jdbc:postgresql://database-2.cluster-ro-***.ap-southeast-2.rds.amazonaws.com:5432/postgres
    platform: postgresql
    username: postgres
    password: ****
    schema: postgres
    maximum-pool-size: 10
    minimum-idle: 1
    idle-timeout: 10000
    max-lifetime: 30000
    pool-name: ReadHikariPool
    connection-test-query: SELECT 1
  datasource-writer:
    driver-class-name: software.aws.rds.jdbc.postgresql.Driver
    jdbc-url: jdbc:postgresql:aws://database-2.cluster-***.ap-southeast-2.rds.amazonaws.com:5432/postgres
    platform: postgresql
    username: postgres
    password: ****
    schema: postgres
    maximum-pool-size: 10
    minimum-idle: 1
    idle-timeout: 10000 # This is the minimum supported idle timeout
    max-lifetime: 30000 # This is the minimum supported idle timeout
    pool-name: WriteHikariPool
    # SELECT 1 appears to be more efficient than SET TRANSACTION READ WRITE
    # At least when used with the awslabs postgres jdbc library.
    connection-test-query: SELECT 1
    connection-init-sql: SELECT 1

  flyway:
    placeholders:
      username: ${spring.datasource.username}
      password: ${spring.datasource.password}
    user: postgres
    password: ****
  jpa:
    show-sql: true

logging:
  level:
    example: DEBUG
    org.hibernate.SQL: DEBUG
    org.hibernate.type: TRACE
